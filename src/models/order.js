const { DataTypes } = require('sequelize');
const sequelize = require('../config/db');
const User = require('../models/user');
const Currency = require('../models/currency');

const Order = sequelize.define('orders', {
    id: {
        type: DataTypes.INTEGER,   // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Integer
        primaryKey: true,         // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Primary Key
        autoIncrement: true       // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Auto Increment
    },
    order_id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4
    },
    user_id: {
        type: DataTypes.UUID,
        allowNull: false,
        references: { // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô Foreign Key (FK)
            model: User, // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà Model 'User'
            key: 'user_id'   // ‡πÉ‡∏ä‡πâ `user_id` ‡πÄ‡∏õ‡πá‡∏ô FK
        }
    },
    order_type: {
        type: DataTypes.ENUM('buy', 'sell'),
        allowNull: false
    },
    currency_id: {
        type: DataTypes.UUID,
        allowNull: false,
        references: { // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô Foreign Key (FK)
            model: Currency, // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà Model 'Currency'
            key: 'currency_id'   // ‡πÉ‡∏ä‡πâ `currency_id` ‡πÄ‡∏õ‡πá‡∏ô FK
        }    },
    price: {
        type: DataTypes.FLOAT,
        allowNull: true
    },
    quantity: {
        type: DataTypes.INTEGER,
        allowNull: true,
    },
    status: {
        type: DataTypes.ENUM('open', 'filled', 'canceled'),
        allowNull: true,
        defaultValue: 'open' // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    },
    created_by: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    created_at: {
        type: DataTypes.DATE,
        allowNull: false,
    },
    updated_at: {
        type: DataTypes.DATE,
        allowNull: true,
    }
}, { timestamps: false });

// üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏ô Sequelize
User.hasMany(Order, { foreignKey: 'user_id' });  // User 1 ‡∏Ñ‡∏ô ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ Order
Order.belongsTo(User, { foreignKey: 'user_id' }); // Order ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ User ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á

Currency.hasMany(Order, { foreignKey: 'currency_id' });  // Currency 1 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ Order
Order.belongsTo(Currency, { foreignKey: 'currency_id' });  // Order ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Currency

module.exports = Order;

